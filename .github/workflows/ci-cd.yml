name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: resources_management
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r t1_cs/requirements.txt
        
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_USER: user
        DB_PASSWORD: password
        DB_NAME: resources_management
      run: |
        pytest t1_cs/tests/ --cov=t1_cs/app

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Create Terraform Variables File
      run: |
        cat > terraform/terraform.auto.tfvars <<EOF
        vpc_id = "${{ secrets.VPC_ID }}"
        private_subnet_ids = ["${{ secrets.SUBNET_ID_1 }}", "${{ secrets.SUBNET_ID_2 }}"]
        db_name = "resources_management"
        db_username = "${{ secrets.DB_USERNAME }}"
        db_password = "${{ secrets.DB_PASSWORD }}"
        region = "us-east-1"
        EOF
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -upgrade -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=resources-management/terraform.tfstate" -backend-config="region=us-east-1"
    
    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
    
    - name: Get API Gateway URL
      id: get_url
      run: |
        cd terraform
        API_URL=$(terraform output -raw api_gateway_url)
        echo "API_URL=$API_URL" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION=$(terraform output -raw lambda_function_name)" >> $GITHUB_ENV
    
    - name: Wait for Lambda to be ready
      run: |
        echo "Waiting for Lambda function to be fully deployed..."
        sleep 30
    
    - name: Test API Deployment
      run: |
        echo "Testing API endpoints..."
        # Test the root endpoint
        ROOT_RESPONSE=$(curl -s $API_URL)
        echo "Root endpoint response: $ROOT_RESPONSE"
        
        # Test the health endpoint
        HEALTH_RESPONSE=$(curl -s $API_URL/health)
        echo "Health endpoint response: $HEALTH_RESPONSE"
        
        # Check if responses are valid
        if [[ "$ROOT_RESPONSE" == *"error"* || "$HEALTH_RESPONSE" == *"error"* ]]; then
          echo "API tests failed!"
          exit 1
        else
          echo "API tests passed!"
        fi
    
    - name: Check Lambda Logs
      run: |
        echo "Checking Lambda logs for errors..."
        aws logs get-log-events --log-group-name "/aws/lambda/$LAMBDA_FUNCTION" --log-stream-name=$(aws logs describe-log-streams --log-group-name "/aws/lambda/$LAMBDA_FUNCTION" --order-by LastEventTime --descending --limit 1 --query 'logStreams[0].logStreamName' --output text) --limit 10