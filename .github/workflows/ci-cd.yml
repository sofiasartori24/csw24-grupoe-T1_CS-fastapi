name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      # Use MySQL service container for integration tests if needed
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r t1_cs/requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests
        run: |
          pytest t1_cs/tests/test_models.py t1_cs/tests/test_repositories.py t1_cs/tests/test_services.py --cov=t1_cs/app --cov-report=xml
      
      - name: Run database tests
        run: |
          pytest t1_cs/tests/test_database.py --cov=t1_cs/app --cov-append --cov-report=xml
      
      - name: Verify coverage report
        run: |
          if [ -f "coverage.xml" ]; then
            echo "Coverage report found at $(pwd)/coverage.xml"
          else
            echo "Warning: coverage.xml not found in expected location"
            find . -name "coverage.xml" -type f
          fi
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage.xml
          if-no-files-found: warn
      
      - name: Build Docker image
        run: |
          docker build -t fastapi-app:${{ github.sha }} .
      
      - name: Test Docker image
        run: |
          docker run --name test-container -d -p 8000:8000 fastapi-app:${{ github.sha }}
          sleep 5
          if ! curl -s http://localhost:8000/health; then
            echo "Health check failed"
            docker logs test-container
            docker stop test-container
            docker rm test-container
            exit 1
          fi
          docker stop test-container
          docker rm test-container

  deploy:
    name: Deploy to AWS
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file=terraform.tfvars
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_environment: "prod"
      
      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=terraform.tfvars
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_environment: "prod"
      
      - name: Get API Gateway URL
        working-directory: ./terraform
        run: |
          echo "API_URL=$(terraform output -raw api_gateway_url)" >> $GITHUB_ENV
      
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for Lambda function to be fully deployed..."
          sleep 30
      
      - name: Test deployed API
        run: |
          echo "Testing API at ${{ env.API_URL }}"
          curl -s ${{ env.API_URL }}/health
      
      - name: Send deployment notification
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment ${{ job.status }}
          SLACK_MESSAGE: "API deployed to ${{ env.API_URL }}"